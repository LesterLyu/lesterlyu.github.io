{"version":3,"sources":["diy/card.js","diy/index.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","minWidth","maxWidth","opacity","zIndex","transform","transition","media","width","height","marginLeft","marginRight","marginTop","marginBottom","text","whiteSpace","DiyCard","label","name","category","how","space","materials","classes","React","useState","open","setOpen","Card","className","CardActionArea","onClick","CardMedia","component","image","process","CardContent","Typography","variant","gutterBottom","color","Dialog","onClose","DialogContent","style","imageRendering","theme","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","spacing","breakpoints","up","searchIcon","padding","pointerEvents","display","alignItems","justifyContent","inputRoot","inputInput","paddingLeft","transitions","create","Diy","searchValue","setSearchValue","cards","i","items","length","item","includes","push","Grid","key","backgroundImage","backgroundAttachment","paddingTop","InputBase","placeholder","input","value","onChange","e","target","container","justify","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.476183f4.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n  Card, CardActionArea, CardContent, CardMedia, Typography,\r\n  Dialog, DialogContent\r\n} from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 140,\r\n    // minHeight: 180,\r\n    maxWidth: 240,\r\n    opacity: '90%',\r\n    '&:hover': {\r\n      zIndex: 1000,\r\n      opacity: '100%',\r\n      transform: 'scale(1.1)',\r\n      transition: '0.2s all',\r\n    }\r\n  },\r\n  media: {\r\n    width: 80,\r\n    height: 80,\r\n    marginLeft: 'auto',\r\n    marginRight: 'auto',\r\n    marginTop: 10,\r\n    marginBottom: 10\r\n  },\r\n  text: {\r\n    whiteSpace: 'pre'\r\n  }\r\n});\r\n\r\nexport default function DiyCard({label, name, category, how, space, materials}) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card className={classes.root}>\r\n        <CardActionArea onClick={handleClickOpen}>\r\n          <CardMedia\r\n            component=\"img\"\r\n            className={classes.media}\r\n            image={process.env.PUBLIC_URL + '/images/' + name + '.png'}\r\n          />\r\n          <CardContent>\r\n            <Typography variant=\"body1\">\r\n              {label}\r\n            </Typography>\r\n            <Typography gutterBottom variant=\"body2\" color=\"textSecondary\" className={classes.text}>\r\n              {space || ' '}\r\n            </Typography>\r\n          </CardContent>\r\n        </CardActionArea>\r\n      </Card>\r\n      <Dialog onClose={handleClose} open={open}>\r\n        <DialogContent>\r\n          <Typography variant=\"body1\">\r\n            {label}\r\n          </Typography>\r\n          <CardMedia\r\n            style={{width: 160, height: 160, imageRendering: 'pixelated'}}\r\n            component=\"img\"\r\n            className={classes.media}\r\n            image={process.env.PUBLIC_URL + '/images/' + name + '.png'}\r\n          />\r\n          <Typography gutterBottom variant=\"body2\" color=\"textSecondary\" className={classes.text}>\r\n            {`占地面积：${space}\\n种类：${category}\\n获得途径：${how}\\n材料：${materials}`}\r\n          </Typography>\r\n\r\n\r\n        </DialogContent>\r\n      </Dialog>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Grid, InputBase } from '@material-ui/core';\r\nimport { fade, makeStyles } from '@material-ui/core/styles';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nimport items from './diy.json';\r\n\r\nimport DiyCard from './card';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  search: {\r\n    position: 'fixed',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.common.white, 1),\r\n    marginRight: theme.spacing(2),\r\n    marginLeft: 0,\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: theme.spacing(3),\r\n      width: 'auto',\r\n    },\r\n    marginBottom: 10,\r\n    zIndex: 10000,\r\n    boxShadow: '0px 2px 1px -1px rgba(0,0,0,0.2), 0px 1px 1px 0px rgba(0,0,0,0.14), 0px 1px 3px 0px rgba(0,0,0,0.12)'\r\n  },\r\n  searchIcon: {\r\n    padding: theme.spacing(0, 2),\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n  },\r\n  inputInput: {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    // vertical padding + font size from searchIcon\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    [theme.breakpoints.up('md')]: {\r\n      width: '40ch',\r\n    },\r\n  },\r\n}));\r\n\r\nexport function Diy() {\r\n  const classes = useStyles();\r\n  const [searchValue, setSearchValue] = useState('');\r\n\r\n  const cards = [];\r\n  const allItems = [...items];\r\n\r\n  for (let i = 0; i < items.length; i++) {\r\n    const item = items[i];\r\n    if (searchValue === '' || item.label.includes(searchValue))\r\n      cards.push(\r\n        <Grid item key={i}>\r\n          <DiyCard\r\n            category={item.category}\r\n            label={item.label}\r\n            how={item.how}\r\n            name={item.name}\r\n            space={item.space}\r\n            materials={item.materials}\r\n          />\r\n        </Grid>)\r\n  }\r\n  return (\r\n    <div style={{\r\n      backgroundColor: '#d68000',\r\n      backgroundImage: 'url(\"/dark-wood.png\")',\r\n      backgroundAttachment: 'fixed',\r\n      paddingTop: 20,\r\n      height: '100%',\r\n    }}>\r\n      <div className={classes.search}>\r\n        <div className={classes.searchIcon}>\r\n          <SearchIcon />\r\n        </div>\r\n        <InputBase\r\n          placeholder=\"Search…\"\r\n          classes={{\r\n            root: classes.inputRoot,\r\n            input: classes.inputInput,\r\n          }}\r\n          value={searchValue}\r\n          onChange={e => setSearchValue(e.target.value)}\r\n        />\r\n      </div>\r\n      <Grid container spacing={2} justify=\"center\" style={{marginTop: 40}}>\r\n        {cards}\r\n      </Grid>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\nimport { Diy } from './diy'\nimport './App.css';\n\nfunction App() {\n  return <Diy/>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}